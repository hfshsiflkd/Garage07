"use client";

import { useState } from "react";
import axios from "axios";
import { API } from "@/app/config";
import { MenuCategory } from "@/app/components/types";

export default function ItemForm({
  menu,
  onSuccess,
}: {
  menu: MenuCategory[];
  onSuccess: () => void;
}) {
  const [newItem, setNewItem] = useState({
    category: "",
    name: "",
    price: "", // input –¥—ç—ç—Ä string –±–∞—Ä–∏–∞–¥ —Å–µ—Ä–≤–µ—Ä—Ç —è–≤—É—É–ª–∞—Ö–¥–∞–∞ —Ç–æ–æ –±–æ–ª–≥–æ–Ω–æ
    desc: "",
    img: "",
  });
  const [uploading, setUploading] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // üñºÔ∏è Cloudinary –∑—É—Ä–∞–≥ upload (API —Ç–∞–Ω—ã—Ö —Ä—É—É formdata –∏–ª–≥—ç—ç–∂ –±–∞–π–≥–∞–∞)
  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const formData = new FormData();
    formData.append("file", file);

    try {
      setUploading(true);
      const res = await axios.post<{ url: string }>(
        `${API}/api/upload`,
        formData,
        { headers: { "Content-Type": "multipart/form-data" } }
      );
      setNewItem((p) => ({ ...p, img: res.data.url }));
    } catch (err) {
      console.error("‚ùå Upload error:", err);
      alert("–ó—É—Ä–∞–≥ upload –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
    } finally {
      setUploading(false);
    }
  };

  // –¢—É—Å–ª–∞—Ö: –º”©–Ω–≥”©–Ω —Ç–µ–∫—Å—Ç–∏–π–≥ —Ç–æ–æ –±–æ–ª–≥–æ—Ö
  const toNumber = (v: string) => Number(String(v).replace(/[^\d.-]/g, ""));

  // ‚ú® Submit –±–æ–ª–æ–º–∂—Ç–æ–π —ç—Å—ç—Ö (–∑—É—Ä–∞–≥ –∑–∞–∞–≤–∞–ª –±–∞–π—Ö —ë—Å—Ç–æ–π)
  const priceNum = toNumber(newItem.price);
  const canSubmit =
    !!newItem.category &&
    !!newItem.name.trim() &&
    !Number.isNaN(priceNum) &&
    priceNum >= 0 &&
    !!newItem.img && // ‚Üê –ó—É—Ä–∞–≥ –±–∞–π—Ö —ë—Å—Ç–æ–π
    !uploading &&
    !submitting;

  // üçΩÔ∏è –•–æ–æ–ª –Ω—ç–º—ç—Ö
  const addItem = async (e: React.FormEvent) => {
    e.preventDefault();

    // –•—ç—Ä—ç–≥–ª—ç–≥—á —à—É—É–¥ submit –¥–∞—Ä–≤–∞–ª –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—è
    if (!newItem.img) {
      alert("–ó—É—Ä–∞–≥ –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–Ω–∞ —É—É.");
      return;
    }
    if (!newItem.category || !newItem.name.trim()) {
      alert("–ö–∞—Ç–µ–≥–æ—Ä–∏ –±–æ–ª–æ–Ω –Ω—ç—Ä–∏–π–≥ –±”©–≥–ª”©–Ω”© “Ø“Ø.");
      return;
    }
    if (Number.isNaN(priceNum)) {
      alert("“Æ–Ω—ç –±—É—Ä—É—É. –¢–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É.");
      return;
    }

    try {
      setSubmitting(true);
      await axios.post(`${API}/api/menu/${encodeURIComponent(newItem.category)}/items`, {
        name: newItem.name.trim(),
        price: priceNum,
        desc: newItem.desc.trim(),
        img: newItem.img,
      });

      // Reset
      setNewItem({ category: "", name: "", price: "", desc: "", img: "" });
      onSuccess();
    } catch (err) {
      console.error("‚ùå Add item error:", err);
      alert("–•–æ–æ–ª –Ω—ç–º—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <form
      onSubmit={addItem}
      className="bg-[#151518] p-4 rounded-lg border border-gray-700 grid gap-3"
      noValidate
    >
      <h2 className="text-lg font-semibold text-[#a7ffea]">–®–∏–Ω—ç —Ö–æ–æ–ª –Ω—ç–º—ç—Ö</h2>

      <select
        value={newItem.category}
        onChange={(e) => setNewItem({ ...newItem, category: e.target.value })}
        className="p-2 bg-black border border-gray-700 rounded-md"
        required
      >
        <option value="">–ö–∞—Ç–µ–≥–æ—Ä–∏ —Å–æ–Ω–≥–æ—Ö...</option>
        {menu.map((cat) => (
          <option key={cat.category} value={cat.category}>
            {cat.category}
          </option>
        ))}
      </select>

      <input
        type="text"
        placeholder="–•–æ–æ–ª–Ω—ã –Ω—ç—Ä"
        value={newItem.name}
        onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
        className="p-2 bg-black border border-gray-700 rounded-md"
        required
      />

      <input
        type="number"
        placeholder="“Æ–Ω—ç"
        value={newItem.price}
        onChange={(e) => setNewItem({ ...newItem, price: e.target.value })}
        className="p-2 bg-black border border-gray-700 rounded-md"
        inputMode="numeric"
        min={0}
        step="1"
        required
      />

      <textarea
        placeholder="–¢–∞–π–ª–±–∞—Ä (—Å–æ–Ω–≥–æ–ª—Ç—Ç–æ–π)"
        value={newItem.desc}
        onChange={(e) => setNewItem({ ...newItem, desc: e.target.value })}
        className="p-2 bg-black border border-gray-700 rounded-md"
      />

      {/* üñºÔ∏è Cloudinary upload */}
      <div>
        <input
          type="file"
          accept="image/*"
          onChange={handleImageUpload}
          className="block w-full text-sm text-gray-400
          file:mr-4 file:py-2 file:px-4
          file:rounded-md file:border-0
          file:text-sm file:font-semibold
          file:bg-[#a7ffea] file:text-black
          hover:file:bg-[#8cf6db]"
        />

        {uploading && <p className="text-gray-400 mt-1">Uploading...</p>}

        {newItem.img ? (
          // eslint-disable-next-line @next/next/no-img-element
          <img
            src={newItem.img}
            alt="Preview"
            className="mt-2 rounded-md w-32 h-32 object-cover border border-gray-700"
          />
        ) : (
          <p className="text-xs text-red-400 mt-2">
            –ó—É—Ä–∞–≥ –æ—Ä—É—É–ª—Å–Ω—ã –¥–∞—Ä–∞–∞ Add Item –∏–¥—ç–≤—Ö–∂–∏–Ω—ç
          </p>
        )}
      </div>

      <button
        type="submit"
        disabled={!canSubmit}
        className={`font-semibold py-2 rounded-md w-full ${
          !canSubmit
            ? "bg-gray-500 text-gray-300 cursor-not-allowed"
            : "bg-[#a7ffea] text-black hover:bg-[#8cf6db]"
        }`}
        title={!newItem.img ? "–ó—É—Ä–∞–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É" : ""}
      >
        {uploading || submitting ? "–¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..." : "Add Item"}
      </button>
    </form>
  );
}